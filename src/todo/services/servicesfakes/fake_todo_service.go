// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"go_todo_api/src/shared/entities"
	"go_todo_api/src/todo/dto"
	"go_todo_api/src/todo/services"
	"sync"
)

type FakeTodoService struct {
	DetailStub        func(dto.DetailTodoRequest) entities.BaseResponse[dto.DetailTodoResponse]
	detailMutex       sync.RWMutex
	detailArgsForCall []struct {
		arg1 dto.DetailTodoRequest
	}
	detailReturns struct {
		result1 entities.BaseResponse[dto.DetailTodoResponse]
	}
	detailReturnsOnCall map[int]struct {
		result1 entities.BaseResponse[dto.DetailTodoResponse]
	}
	FindStub        func(dto.FindTodoRequest) entities.BaseResponseArray[dto.FindTodoResponse]
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		arg1 dto.FindTodoRequest
	}
	findReturns struct {
		result1 entities.BaseResponseArray[dto.FindTodoResponse]
	}
	findReturnsOnCall map[int]struct {
		result1 entities.BaseResponseArray[dto.FindTodoResponse]
	}
	StoreStub        func(dto.StoreTodoRequest) entities.BaseResponse[dto.StoreTodoResponse]
	storeMutex       sync.RWMutex
	storeArgsForCall []struct {
		arg1 dto.StoreTodoRequest
	}
	storeReturns struct {
		result1 entities.BaseResponse[dto.StoreTodoResponse]
	}
	storeReturnsOnCall map[int]struct {
		result1 entities.BaseResponse[dto.StoreTodoResponse]
	}
	UpdateStub        func(dto.UpdateTodoRequest) entities.BaseResponse[dto.UpdateTodoResponse]
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 dto.UpdateTodoRequest
	}
	updateReturns struct {
		result1 entities.BaseResponse[dto.UpdateTodoResponse]
	}
	updateReturnsOnCall map[int]struct {
		result1 entities.BaseResponse[dto.UpdateTodoResponse]
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTodoService) Detail(arg1 dto.DetailTodoRequest) entities.BaseResponse[dto.DetailTodoResponse] {
	fake.detailMutex.Lock()
	ret, specificReturn := fake.detailReturnsOnCall[len(fake.detailArgsForCall)]
	fake.detailArgsForCall = append(fake.detailArgsForCall, struct {
		arg1 dto.DetailTodoRequest
	}{arg1})
	stub := fake.DetailStub
	fakeReturns := fake.detailReturns
	fake.recordInvocation("Detail", []interface{}{arg1})
	fake.detailMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTodoService) DetailCallCount() int {
	fake.detailMutex.RLock()
	defer fake.detailMutex.RUnlock()
	return len(fake.detailArgsForCall)
}

func (fake *FakeTodoService) DetailCalls(stub func(dto.DetailTodoRequest) entities.BaseResponse[dto.DetailTodoResponse]) {
	fake.detailMutex.Lock()
	defer fake.detailMutex.Unlock()
	fake.DetailStub = stub
}

func (fake *FakeTodoService) DetailArgsForCall(i int) dto.DetailTodoRequest {
	fake.detailMutex.RLock()
	defer fake.detailMutex.RUnlock()
	argsForCall := fake.detailArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTodoService) DetailReturns(result1 entities.BaseResponse[dto.DetailTodoResponse]) {
	fake.detailMutex.Lock()
	defer fake.detailMutex.Unlock()
	fake.DetailStub = nil
	fake.detailReturns = struct {
		result1 entities.BaseResponse[dto.DetailTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) DetailReturnsOnCall(i int, result1 entities.BaseResponse[dto.DetailTodoResponse]) {
	fake.detailMutex.Lock()
	defer fake.detailMutex.Unlock()
	fake.DetailStub = nil
	if fake.detailReturnsOnCall == nil {
		fake.detailReturnsOnCall = make(map[int]struct {
			result1 entities.BaseResponse[dto.DetailTodoResponse]
		})
	}
	fake.detailReturnsOnCall[i] = struct {
		result1 entities.BaseResponse[dto.DetailTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) Find(arg1 dto.FindTodoRequest) entities.BaseResponseArray[dto.FindTodoResponse] {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		arg1 dto.FindTodoRequest
	}{arg1})
	stub := fake.FindStub
	fakeReturns := fake.findReturns
	fake.recordInvocation("Find", []interface{}{arg1})
	fake.findMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTodoService) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeTodoService) FindCalls(stub func(dto.FindTodoRequest) entities.BaseResponseArray[dto.FindTodoResponse]) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = stub
}

func (fake *FakeTodoService) FindArgsForCall(i int) dto.FindTodoRequest {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	argsForCall := fake.findArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTodoService) FindReturns(result1 entities.BaseResponseArray[dto.FindTodoResponse]) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 entities.BaseResponseArray[dto.FindTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) FindReturnsOnCall(i int, result1 entities.BaseResponseArray[dto.FindTodoResponse]) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 entities.BaseResponseArray[dto.FindTodoResponse]
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 entities.BaseResponseArray[dto.FindTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) Store(arg1 dto.StoreTodoRequest) entities.BaseResponse[dto.StoreTodoResponse] {
	fake.storeMutex.Lock()
	ret, specificReturn := fake.storeReturnsOnCall[len(fake.storeArgsForCall)]
	fake.storeArgsForCall = append(fake.storeArgsForCall, struct {
		arg1 dto.StoreTodoRequest
	}{arg1})
	stub := fake.StoreStub
	fakeReturns := fake.storeReturns
	fake.recordInvocation("Store", []interface{}{arg1})
	fake.storeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTodoService) StoreCallCount() int {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return len(fake.storeArgsForCall)
}

func (fake *FakeTodoService) StoreCalls(stub func(dto.StoreTodoRequest) entities.BaseResponse[dto.StoreTodoResponse]) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = stub
}

func (fake *FakeTodoService) StoreArgsForCall(i int) dto.StoreTodoRequest {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	argsForCall := fake.storeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTodoService) StoreReturns(result1 entities.BaseResponse[dto.StoreTodoResponse]) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = nil
	fake.storeReturns = struct {
		result1 entities.BaseResponse[dto.StoreTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) StoreReturnsOnCall(i int, result1 entities.BaseResponse[dto.StoreTodoResponse]) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = nil
	if fake.storeReturnsOnCall == nil {
		fake.storeReturnsOnCall = make(map[int]struct {
			result1 entities.BaseResponse[dto.StoreTodoResponse]
		})
	}
	fake.storeReturnsOnCall[i] = struct {
		result1 entities.BaseResponse[dto.StoreTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) Update(arg1 dto.UpdateTodoRequest) entities.BaseResponse[dto.UpdateTodoResponse] {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 dto.UpdateTodoRequest
	}{arg1})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTodoService) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeTodoService) UpdateCalls(stub func(dto.UpdateTodoRequest) entities.BaseResponse[dto.UpdateTodoResponse]) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeTodoService) UpdateArgsForCall(i int) dto.UpdateTodoRequest {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTodoService) UpdateReturns(result1 entities.BaseResponse[dto.UpdateTodoResponse]) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 entities.BaseResponse[dto.UpdateTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) UpdateReturnsOnCall(i int, result1 entities.BaseResponse[dto.UpdateTodoResponse]) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 entities.BaseResponse[dto.UpdateTodoResponse]
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 entities.BaseResponse[dto.UpdateTodoResponse]
	}{result1}
}

func (fake *FakeTodoService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.detailMutex.RLock()
	defer fake.detailMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTodoService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.TodoService = new(FakeTodoService)
