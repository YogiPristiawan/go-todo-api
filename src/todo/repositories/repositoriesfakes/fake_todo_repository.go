// Code generated by counterfeiter. DO NOT EDIT.
package repositoriesfakes

import (
	"go_todo_api/src/todo/models"
	"go_todo_api/src/todo/repositories"
	"sync"
)

type FakeTodoRepository struct {
	DetailStub        func(int64, int64) (models.Todo, error)
	detailMutex       sync.RWMutex
	detailArgsForCall []struct {
		arg1 int64
		arg2 int64
	}
	detailReturns struct {
		result1 models.Todo
		result2 error
	}
	detailReturnsOnCall map[int]struct {
		result1 models.Todo
		result2 error
	}
	FindStub        func(int64) ([]models.Todo, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		arg1 int64
	}
	findReturns struct {
		result1 []models.Todo
		result2 error
	}
	findReturnsOnCall map[int]struct {
		result1 []models.Todo
		result2 error
	}
	StoreStub        func(*models.Todo) error
	storeMutex       sync.RWMutex
	storeArgsForCall []struct {
		arg1 *models.Todo
	}
	storeReturns struct {
		result1 error
	}
	storeReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(*models.Todo) (models.Todo, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 *models.Todo
	}
	updateReturns struct {
		result1 models.Todo
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 models.Todo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTodoRepository) Detail(arg1 int64, arg2 int64) (models.Todo, error) {
	fake.detailMutex.Lock()
	ret, specificReturn := fake.detailReturnsOnCall[len(fake.detailArgsForCall)]
	fake.detailArgsForCall = append(fake.detailArgsForCall, struct {
		arg1 int64
		arg2 int64
	}{arg1, arg2})
	stub := fake.DetailStub
	fakeReturns := fake.detailReturns
	fake.recordInvocation("Detail", []interface{}{arg1, arg2})
	fake.detailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTodoRepository) DetailCallCount() int {
	fake.detailMutex.RLock()
	defer fake.detailMutex.RUnlock()
	return len(fake.detailArgsForCall)
}

func (fake *FakeTodoRepository) DetailCalls(stub func(int64, int64) (models.Todo, error)) {
	fake.detailMutex.Lock()
	defer fake.detailMutex.Unlock()
	fake.DetailStub = stub
}

func (fake *FakeTodoRepository) DetailArgsForCall(i int) (int64, int64) {
	fake.detailMutex.RLock()
	defer fake.detailMutex.RUnlock()
	argsForCall := fake.detailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTodoRepository) DetailReturns(result1 models.Todo, result2 error) {
	fake.detailMutex.Lock()
	defer fake.detailMutex.Unlock()
	fake.DetailStub = nil
	fake.detailReturns = struct {
		result1 models.Todo
		result2 error
	}{result1, result2}
}

func (fake *FakeTodoRepository) DetailReturnsOnCall(i int, result1 models.Todo, result2 error) {
	fake.detailMutex.Lock()
	defer fake.detailMutex.Unlock()
	fake.DetailStub = nil
	if fake.detailReturnsOnCall == nil {
		fake.detailReturnsOnCall = make(map[int]struct {
			result1 models.Todo
			result2 error
		})
	}
	fake.detailReturnsOnCall[i] = struct {
		result1 models.Todo
		result2 error
	}{result1, result2}
}

func (fake *FakeTodoRepository) Find(arg1 int64) ([]models.Todo, error) {
	fake.findMutex.Lock()
	ret, specificReturn := fake.findReturnsOnCall[len(fake.findArgsForCall)]
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		arg1 int64
	}{arg1})
	stub := fake.FindStub
	fakeReturns := fake.findReturns
	fake.recordInvocation("Find", []interface{}{arg1})
	fake.findMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTodoRepository) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeTodoRepository) FindCalls(stub func(int64) ([]models.Todo, error)) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = stub
}

func (fake *FakeTodoRepository) FindArgsForCall(i int) int64 {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	argsForCall := fake.findArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTodoRepository) FindReturns(result1 []models.Todo, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 []models.Todo
		result2 error
	}{result1, result2}
}

func (fake *FakeTodoRepository) FindReturnsOnCall(i int, result1 []models.Todo, result2 error) {
	fake.findMutex.Lock()
	defer fake.findMutex.Unlock()
	fake.FindStub = nil
	if fake.findReturnsOnCall == nil {
		fake.findReturnsOnCall = make(map[int]struct {
			result1 []models.Todo
			result2 error
		})
	}
	fake.findReturnsOnCall[i] = struct {
		result1 []models.Todo
		result2 error
	}{result1, result2}
}

func (fake *FakeTodoRepository) Store(arg1 *models.Todo) error {
	fake.storeMutex.Lock()
	ret, specificReturn := fake.storeReturnsOnCall[len(fake.storeArgsForCall)]
	fake.storeArgsForCall = append(fake.storeArgsForCall, struct {
		arg1 *models.Todo
	}{arg1})
	stub := fake.StoreStub
	fakeReturns := fake.storeReturns
	fake.recordInvocation("Store", []interface{}{arg1})
	fake.storeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTodoRepository) StoreCallCount() int {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return len(fake.storeArgsForCall)
}

func (fake *FakeTodoRepository) StoreCalls(stub func(*models.Todo) error) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = stub
}

func (fake *FakeTodoRepository) StoreArgsForCall(i int) *models.Todo {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	argsForCall := fake.storeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTodoRepository) StoreReturns(result1 error) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = nil
	fake.storeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTodoRepository) StoreReturnsOnCall(i int, result1 error) {
	fake.storeMutex.Lock()
	defer fake.storeMutex.Unlock()
	fake.StoreStub = nil
	if fake.storeReturnsOnCall == nil {
		fake.storeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTodoRepository) Update(arg1 *models.Todo) (models.Todo, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 *models.Todo
	}{arg1})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTodoRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeTodoRepository) UpdateCalls(stub func(*models.Todo) (models.Todo, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeTodoRepository) UpdateArgsForCall(i int) *models.Todo {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTodoRepository) UpdateReturns(result1 models.Todo, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 models.Todo
		result2 error
	}{result1, result2}
}

func (fake *FakeTodoRepository) UpdateReturnsOnCall(i int, result1 models.Todo, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 models.Todo
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 models.Todo
		result2 error
	}{result1, result2}
}

func (fake *FakeTodoRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.detailMutex.RLock()
	defer fake.detailMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTodoRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.TodoRepository = new(FakeTodoRepository)
