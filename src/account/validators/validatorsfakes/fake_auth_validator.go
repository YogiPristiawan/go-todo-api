// Code generated by counterfeiter. DO NOT EDIT.
package validatorsfakes

import (
	"go_todo_api/src/account/dto"
	"go_todo_api/src/account/validators"
	"sync"
)

type FakeAuthValidator struct {
	ValidateLoginStub        func(dto.LoginRequest) error
	validateLoginMutex       sync.RWMutex
	validateLoginArgsForCall []struct {
		arg1 dto.LoginRequest
	}
	validateLoginReturns struct {
		result1 error
	}
	validateLoginReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateRegisterStub        func(dto.RegisterRequest) error
	validateRegisterMutex       sync.RWMutex
	validateRegisterArgsForCall []struct {
		arg1 dto.RegisterRequest
	}
	validateRegisterReturns struct {
		result1 error
	}
	validateRegisterReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthValidator) ValidateLogin(arg1 dto.LoginRequest) error {
	fake.validateLoginMutex.Lock()
	ret, specificReturn := fake.validateLoginReturnsOnCall[len(fake.validateLoginArgsForCall)]
	fake.validateLoginArgsForCall = append(fake.validateLoginArgsForCall, struct {
		arg1 dto.LoginRequest
	}{arg1})
	stub := fake.ValidateLoginStub
	fakeReturns := fake.validateLoginReturns
	fake.recordInvocation("ValidateLogin", []interface{}{arg1})
	fake.validateLoginMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthValidator) ValidateLoginCallCount() int {
	fake.validateLoginMutex.RLock()
	defer fake.validateLoginMutex.RUnlock()
	return len(fake.validateLoginArgsForCall)
}

func (fake *FakeAuthValidator) ValidateLoginCalls(stub func(dto.LoginRequest) error) {
	fake.validateLoginMutex.Lock()
	defer fake.validateLoginMutex.Unlock()
	fake.ValidateLoginStub = stub
}

func (fake *FakeAuthValidator) ValidateLoginArgsForCall(i int) dto.LoginRequest {
	fake.validateLoginMutex.RLock()
	defer fake.validateLoginMutex.RUnlock()
	argsForCall := fake.validateLoginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthValidator) ValidateLoginReturns(result1 error) {
	fake.validateLoginMutex.Lock()
	defer fake.validateLoginMutex.Unlock()
	fake.ValidateLoginStub = nil
	fake.validateLoginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthValidator) ValidateLoginReturnsOnCall(i int, result1 error) {
	fake.validateLoginMutex.Lock()
	defer fake.validateLoginMutex.Unlock()
	fake.ValidateLoginStub = nil
	if fake.validateLoginReturnsOnCall == nil {
		fake.validateLoginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateLoginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthValidator) ValidateRegister(arg1 dto.RegisterRequest) error {
	fake.validateRegisterMutex.Lock()
	ret, specificReturn := fake.validateRegisterReturnsOnCall[len(fake.validateRegisterArgsForCall)]
	fake.validateRegisterArgsForCall = append(fake.validateRegisterArgsForCall, struct {
		arg1 dto.RegisterRequest
	}{arg1})
	stub := fake.ValidateRegisterStub
	fakeReturns := fake.validateRegisterReturns
	fake.recordInvocation("ValidateRegister", []interface{}{arg1})
	fake.validateRegisterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthValidator) ValidateRegisterCallCount() int {
	fake.validateRegisterMutex.RLock()
	defer fake.validateRegisterMutex.RUnlock()
	return len(fake.validateRegisterArgsForCall)
}

func (fake *FakeAuthValidator) ValidateRegisterCalls(stub func(dto.RegisterRequest) error) {
	fake.validateRegisterMutex.Lock()
	defer fake.validateRegisterMutex.Unlock()
	fake.ValidateRegisterStub = stub
}

func (fake *FakeAuthValidator) ValidateRegisterArgsForCall(i int) dto.RegisterRequest {
	fake.validateRegisterMutex.RLock()
	defer fake.validateRegisterMutex.RUnlock()
	argsForCall := fake.validateRegisterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthValidator) ValidateRegisterReturns(result1 error) {
	fake.validateRegisterMutex.Lock()
	defer fake.validateRegisterMutex.Unlock()
	fake.ValidateRegisterStub = nil
	fake.validateRegisterReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthValidator) ValidateRegisterReturnsOnCall(i int, result1 error) {
	fake.validateRegisterMutex.Lock()
	defer fake.validateRegisterMutex.Unlock()
	fake.ValidateRegisterStub = nil
	if fake.validateRegisterReturnsOnCall == nil {
		fake.validateRegisterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateRegisterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateLoginMutex.RLock()
	defer fake.validateLoginMutex.RUnlock()
	fake.validateRegisterMutex.RLock()
	defer fake.validateRegisterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ validators.AuthValidator = new(FakeAuthValidator)
